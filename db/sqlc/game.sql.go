// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: game.sql

package db

import (
	"context"
	"time"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (
  owner_id,
  starts_at,
  ends_at
) VALUES (
  $1, $2, $3
) RETURNING id, owner_id, starts_at, ends_at, created_at, updated_at
`

type CreateGameParams struct {
	OwnerID  int64     `json:"owner_id"`
	StartsAt time.Time `json:"starts_at"`
	EndsAt   time.Time `json:"ends_at"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame, arg.OwnerID, arg.StartsAt, arg.EndsAt)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.StartsAt,
		&i.EndsAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGame, id)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, owner_id, starts_at, ends_at, created_at, updated_at FROM games
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.StartsAt,
		&i.EndsAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, owner_id, starts_at, ends_at, created_at, updated_at FROM games
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListGamesParams struct {
	OwnerID int64 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListGames(ctx context.Context, arg ListGamesParams) ([]Game, error) {
	rows, err := q.db.Query(ctx, listGames, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Game{}
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :one
UPDATE games
SET
  starts_at = $2,
  ends_at = $3,
  updated_at = now()
WHERE id = $1
RETURNING id, owner_id, starts_at, ends_at, created_at, updated_at
`

type UpdateGameParams struct {
	ID       int64     `json:"id"`
	StartsAt time.Time `json:"starts_at"`
	EndsAt   time.Time `json:"ends_at"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, updateGame, arg.ID, arg.StartsAt, arg.EndsAt)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.StartsAt,
		&i.EndsAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
